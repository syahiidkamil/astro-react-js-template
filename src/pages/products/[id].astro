---
import MainLayout from "@layouts/MainLayout.astro";
import Button from "@components/ui/Button";
import AddToCartForm from "@components/product/AddToCartForm";
import { productApi } from "@api/products";

// Define the static paths for all products
export async function getStaticPaths() {
  // Fetch all products
  const products = await productApi.getAllProducts();
  
  // Return the paths for each product
  return products.map(product => ({
    params: { id: product.id },
    props: { product },
  }));
}

// Get the product from props
const { product } = Astro.props;

// Fetch related products
let relatedProducts = [];
try {
  relatedProducts = await productApi.getAllProducts({ limit: 4 });
  // Optionally filter out the current product from related products
  relatedProducts = relatedProducts.filter(p => p.id !== product.id);
} catch (error) {
  console.error('Failed to fetch related products:', error);
  // Continue with empty related products
}
---

<MainLayout
  title={`${product.name} | ShopAstro`}
  description={product.description}
  image={product.image}
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Breadcrumbs -->
    <nav class="flex mb-8" aria-label="Breadcrumb">
      <ol class="flex items-center space-x-2">
        <li>
          <a href="/" class="text-gray-400 hover:text-gray-500">Home</a>
        </li>
        <li class="flex items-center">
          <svg class="h-5 w-5 text-gray-300" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
          <a href="/products" class="ml-2 text-gray-400 hover:text-gray-500">Products</a>
        </li>
        <li class="flex items-center">
          <svg class="h-5 w-5 text-gray-300" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
          <span class="ml-2 text-gray-600" aria-current="page">
            {product.name}
          </span>
        </li>
      </ol>
    </nav>

    <!-- Product -->
    <div class="lg:grid lg:grid-cols-2 lg:gap-x-8">
      <!-- Product images -->
      <div class="lg:max-w-lg lg:self-end">
        <div class="aspect-w-1 aspect-h-1 rounded-lg overflow-hidden">
          {product.image ? (
            <img 
              src={product.image} 
              alt={product.name} 
              class="w-full h-full object-center object-cover"
            />
          ) : (
            <div class="w-full h-full bg-gray-200 flex items-center justify-center">
              <span class="text-gray-400">No image available</span>
            </div>
          )}
        </div>
      </div>

      <!-- Product details -->
      <div class="max-w-2xl mx-auto mt-10 lg:mt-0 lg:max-w-none">
        <div class="mt-4">
          <h1 class="text-3xl font-extrabold tracking-tight text-gray-900 sm:text-4xl">
            {product.name}
          </h1>
        </div>

        <div class="mt-4">
          <div class="flex items-center">
            <div class="flex items-center">
              {Array.from({ length: 5 }).map((_, i) => (
                <svg 
                  class={`h-5 w-5 ${i < 4 ? 'text-yellow-400' : 'text-gray-300'}`} 
                  xmlns="http://www.w3.org/2000/svg" 
                  viewBox="0 0 20 20" 
                  fill="currentColor"
                  aria-hidden="true"
                >
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
              ))}
            </div>
            <a href="#reviews" class="ml-2 text-sm text-blue-600 hover:text-blue-500">
              {/* This would be dynamic in a real app */}
              42 reviews
            </a>
          </div>
        </div>

        <div class="mt-6">
          <h2 class="sr-only">Product information</h2>
          <p class="text-3xl text-gray-900">${(product.price || 0).toFixed(2)}</p>
          <p class="mt-2 text-sm text-gray-500">Free shipping on orders over $50</p>
        </div>

        <div class="mt-6">
          <h3 class="sr-only">Description</h3>
          <div class="text-base text-gray-700 space-y-6">
            <p>{product.description}</p>
          </div>
        </div>

        <!-- Product form -->
        <div class="mt-8">
          <div class="flex mt-6">
            <AddToCartForm product={product} client:load />
          </div>
        </div>

        <!-- Features and details -->
        <div class="mt-10">
          <h2 class="text-lg font-medium text-gray-900">Details</h2>
          <div class="mt-4 space-y-6">
            <p class="text-base text-gray-600">
              This is where additional product details would go. For a real product, this would include features, specifications, materials, etc.
            </p>
          </div>
        </div>
      </div>
    </div>

    <!-- Related products -->
    <div class="mt-16 lg:mt-24">
      <h2 class="text-xl font-bold text-gray-900 mb-6">Customers also bought</h2>
      <div class="grid grid-cols-1 gap-y-10 gap-x-6 sm:grid-cols-2 lg:grid-cols-4 xl:gap-x-8">
        {relatedProducts.map((relatedProduct) => (
          <div key={relatedProduct.id} class="group relative">
            <div class="w-full min-h-80 bg-gray-200 aspect-w-1 aspect-h-1 rounded-md overflow-hidden group-hover:opacity-75">
              {relatedProduct.image ? (
                <img
                  src={relatedProduct.image}
                  alt={relatedProduct.name}
                  class="w-full h-full object-center object-cover"
                />
              ) : (
                <div class="w-full h-full flex items-center justify-center">
                  <span class="text-gray-400">No image</span>
                </div>
              )}
            </div>
            <div class="mt-4 flex justify-between">
              <div>
                <h3 class="text-sm text-gray-700">
                  <a href={`/products/${relatedProduct.id}`}>
                    <span aria-hidden="true" class="absolute inset-0"></span>
                    {relatedProduct.name}
                  </a>
                </h3>
              </div>
              <p class="text-sm font-medium text-gray-900">${(relatedProduct.price || 0).toFixed(2)}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</MainLayout>

<script>
  // This component could be implemented as a React component for more interactivity
  class AddToCartForm extends HTMLElement {
    constructor() {
      super();

      const form = this.querySelector('form');
      const quantityInput = this.querySelector('input[name="quantity"]');
      const minusButton = this.querySelector('.minus-button');
      const plusButton = this.querySelector('.plus-button');
      const addToCartButton = this.querySelector('button[type="submit"]');

      // Quantity adjustment
      minusButton.addEventListener('click', () => {
        const currentValue = parseInt(quantityInput.value, 10);
        if (currentValue > 1) {
          quantityInput.value = currentValue - 1;
        }
      });

      plusButton.addEventListener('click', () => {
        const currentValue = parseInt(quantityInput.value, 10);
        quantityInput.value = currentValue + 1;
      });

      // Form submission
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        const quantity = parseInt(quantityInput.value, 10);
        // Logic to add to cart would go here in a real app
        console.log(`Added ${quantity} items to cart`);
        
        // Provide feedback to user
        addToCartButton.textContent = 'Added to Cart!';
        setTimeout(() => {
          addToCartButton.textContent = 'Add to Cart';
        }, 2000);
      });
    }
  }

  customElements.define('add-to-cart-form', AddToCartForm);
</script>
